scriptencoding

" Set the mapleader before doing anything else, so that any leader mappings will
" have the correct leader key.
let mapleader = ','

" Plugin setup {{{1
  source ~/dotfiles-etc/vim/plugin_settings/plugins.general.vim
" End Plugin setup
" }}}1

" Syntax and colorscheme {{{1
  " Switch syntax highlighting on when the terminal has colors
  " or when a GUI is running.
  if &t_Co > 2 || has('gui_running')
    syntax on
  endif

  " Tell the terminal to use 256 colors
  let &t_Co=256

  " Setup truecolors
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors

  " Use a nice 256 color colorscheme
  colorscheme twilight256

  " Load in any customizations to the stock colorschemes
  runtime! colors/custom/*.vim
" End syntax and colorscheme
" }}}1

" Tab and indent related settings {{{1
  set expandtab       " Set up spaces as tabs
  set shiftround      " When at 3 spaces, and I hit > ... go to 4, not 5
  set shiftwidth=2    " Each step of autoindent = 2 spaces
  set smartindent     " Indent based on the previous line
  set smarttab        " Tab at start of line = shiftwidth, otherwise softtabstop
  set softtabstop=2   " 1 "soft tab" = 2 spaces
  set tabstop=2       " 1 tab will count for 2 spaces
" End tab and indent related settings
" }}}1

" Assorted configuration options {{{1
  " Turn off modeline. I never use it and it's a vulnerability:
  " https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
  set nomodeline

  set hidden            " Allow buffer switching without saving
  set history=50        " Keep 50 lines of command line history
  set iskeyword+=-      " Add "-" to the iskeyword setting for CSS classes and ids
  set iskeyword+=_      " Add "_" to the iskeyword setting for CSS classes and ids
  set laststatus=2      " Always show the status line
  set noerrorbells      " No error bells
  set nowrap            " Don't wrap
  set number            " Turn on line numbers
  set ruler             " Show the cursor position all the time
  set scrolloff=2       " Show some context when scrolling
  set showcmd           " Display incomplete commands
  set tags=tags;/       " Search recursively for the tags file
  set updatetime=100    " Set this to a lower number than the default. Some plugins (like gitgutter) will update faster.
  set visualbell        " Get rid of the annoying beep
  set wildmenu          " Show a menu when I hit tab in command mode

  " Search stuff
  set hlsearch        " Use search highlighting
  set ignorecase      " Search ignoring case
  set incsearch       " Do incremental searching

  " Allow backspacing over everything in insert mode
  set backspace=indent,eol,start

  " Allow the cursor to move past the end of the line in visual block mode
  set virtualedit=block

  " Ending with the double slash includes the full path in the filename
  " of the swap files to avoid conflicts
  set directory=~/dotfiles-etc/vim/tmp//

  " In many terminal emulators the mouse works just fine, thus enable it
  if has('mouse')
    set mouse=a
  endif

  " Use nicer symbols for listchars
  set listchars=trail:·,tab:▸\ ,eol:¬,extends:…,precedes:…

  " Get rid of the "end of buffer" ~ that vim shows by default
  set fillchars+=eob:\ 

  " Show ↪ at the beginning of wrapped lines
  set showbreak=↪\ ""= Extra whitespace intentional

  set undodir=~/dotfiles-etc/vim/undodir
  set undofile
  set undolevels=1000
  set undoreload=1000

  " Use the patience algorithm for diffs
  " (explanation here: https://vimways.org/2018/the-power-of-diff/)
  if has('patch-8.1.0360')
    set diffopt+=algorithm:patience
  end

  " Set popup menu and window blending in neovim
  if has('nvim')
    set pumblend=6
    set winblend=8
  end

  " GUI only {{{2
  if has('gui_running')
    " Maximize gvim window.
    set lines=150 columns=230

    set guioptions-=T " Get rid of the toolbar
    set guioptions-=e " Get rid of the GUI tabs
    set guioptions-=r " Get rid of the right scrollbar
    set guioptions-=R " Get rid of the right scrollbar
    set guioptions-=l " Get rid of the left scrollbar
    set guioptions-=L " Get rid of the left scrollbar
    set guioptions-=b " Get rid of the bottom scrollbar

    " Always start Macvim fullscreen
    if has('gui_macvim')
      set fullscreen
    end

    " If there's a gui and it's not Macvim, assume it's something like gvim
    if !has('gui_macvim')
      " Get rid of the menu bar (almost as good as full screen)
      set guioptions-=m
    end

    " No blinking cursor
    set guicursor=a:blinkon0

    " We use the sign column diffs and syntax warnings so turn it on with
    " extra features for nvim
    if has('nvim')
      set signcolumn='yes:[1-4]'
    else
      set signcolumn=yes
    end
  endif
  " End GUI only
  " }}}2
  " End assorted configuration
  " }}}1

" Custom colorscheme overrides {{{1
let g:disable_color_overrides = 0

augroup ColorOverrides
  au!
  au ColorScheme * call OverrideColors()
augroup END

function! OverrideColors()
  if g:disable_color_overrides != 1 && empty($USING_VIM_MANPAGER)
    for color_file in split(glob('~/dotfiles-etc/vim/colors/custom/*.vim'), '\n')
      exe 'source' color_file
    endfor

    " Refresh devicons after reloading colorschemes
    " Check to make sure that NERDTree exists before doing this, otherwise it
    " may cause an error, because NERDTree is lazy loaded.
    if exists('g:loaded_webdevicons') && exists('g:NERDTree')
      call webdevicons#refresh()
    endif
  endif
endfunction
" }}}1

" Folding {{{1
" Custom fold method adapted from http://dhruvasagar.com/2013/03/28/vim-better-foldtext
set foldtext=GetFoldText()
function! GetFoldText() "{{{2
  let foldIndent = repeat(' ', indent(v:foldstart))
  let foldExcerpt = GetFoldCodeExcerpt()
  let foldTextStart = strpart(foldIndent . foldExcerpt, 0, (winwidth(0) * 2) / 3) . ' '

  " Adjust the size of the right padding based on how wide the window is
  if winwidth(0) < 150
    let rightPadding = 8
  else
    let rightPadding = (winwidth(0) / 2) + 8
  endif

  let linesCountText = GetLineFoldLineCountText()
  let foldTextEnd = linesCountText . repeat(' ', rightPadding)
  let foldTextLength = strlen(substitute(foldTextStart . foldTextEnd, '.', 'x', 'g')) + &foldcolumn
  return foldTextStart . repeat(' ', winwidth(0) - foldTextLength) . foldTextEnd
endfunction

" Returns the excerpt of the line that will be displayed as part of the
" the fold.
function! GetFoldCodeExcerpt()
  let firstLine = getline(v:foldstart)
  let lastLine = getline(v:foldend)

  " Remove some junk we don't want to show from the first and last lines.
  let lineCleanupPattern = '\v^\s*'
  let firstLineSnippet = substitute(firstLine, lineCleanupPattern, '', 'g')
  let lastLineSnippet = substitute(lastLine, lineCleanupPattern, '', 'g')

  " Check for lines where the method name + parameters list is longer than
  " can be displayed. For these, collapse the parameter list.
  let methodAndParamsPattern = '\v(\w+)\(([^\(]*)\)'
  if len(matchstr(firstLineSnippet, methodAndParamsPattern)) > 60
    let firstLineSnippet = substitute(firstLineSnippet, methodAndParamsPattern, '\1(...)', 'g')
  end

  let collapsedChar = '≓'
  return firstLineSnippet . ' ' . collapsedChar . ' ' . lastLineSnippet
endfunction

" Returns the line count that will be displayed on the right side of
" the fold.
function! GetLineFoldLineCountText()
  let lines_count = v:foldend - v:foldstart + 1
  return printf('%1s', lines_count . ' lines') . ' '
endfunction

set foldlevelstart=1 " Start folding at level 1, rather than 0
set foldmethod=syntax " Use the indent level to create folds
set foldminlines=3 " Don't fold groups that are smaller than this
" End custom folding
" }}}1"

" Custom mappings {{{1
  " Don't use Ex mode, use Q for formatting
  noremap Q gq

  " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
  " so that you can undo CTRL-U after inserting a line break.
  inoremap <C-U> <C-G>u<C-U>

  " If there's a gui and it's not Macvim, assume it's something like gvim
  if has('gui_running') && !has('gui_macvim')
    " Set up copy and paste so they work more like other apps
    inoremap <C-V> <ESC>"+gpi
    cnoremap <C-V> <C-R>+
    vnoremap <C-C> "+y

    " Adjust the columns and lines to make the page actually full screen
    nnoremap <leader>full :set columns+=1 lines+=1<CR>
  end

  " Quick buffer stuff
  noremap <leader>bd :bd<CR>
  noremap <leader>bdd :bd!<CR>
  noremap <leader>q :q<CR>

  " Quickly get rid of highlighting
  noremap <leader>nh :noh<CR>

  "Fast editing of .vimrc
  noremap <leader>vimrc :tabedit $MYVIMRC<CR>

  " Hitting jj will jump out of insert mode
  inoremap jj <esc>

  " Hitting kk will jump out of insert mode
  inoremap kk <esc>

  " Quick vertical split
  noremap <leader>sv :vsplit<CR>

  " Quick horizontal split
  noremap <leader>sh :split<CR>

  " Quick full screen toggle
  noremap <leader>fs :set invfullscreen<CR>

  " Search for selected text, forwards or backwards. (http://vim.wikia.com/wiki/VimTip171)
  vnoremap <silent> * :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy/<C-R><C-R>=substitute(
    \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

  vnoremap <silent> # :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy?<C-R><C-R>=substitute(
    \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

  " Searches only within the range that has been selected
  " (http://vim.wikia.com/wiki/Search_only_over_a_visual_range)
  function! RangeSearch(direction)
    call inputsave()
    let g:srchstr = input(a:direction)
    call inputrestore()
    if strlen(g:srchstr) > 0
      let g:srchstr = g:srchstr.
            \ '\%>'.(line("'<")-1).'l'.
            \ '\%<'.(line("'>")+1).'l'
    else
      let g:srchstr = ''
    endif
  endfunction
  vnoremap <silent> / :<C-U>call RangeSearch('/')<CR>:if strlen(g:srchstr) > 0\|exec '/'.g:srchstr\|endif<CR>
  vnoremap <silent> ? :<C-U>call RangeSearch('?')<CR>:if strlen(g:srchstr) > 0\|exec '?'.g:srchstr\|endif<CR>

  " Quickly turn invisibles on and off
  noremap <silent><leader>li :call <SID>ToggleNonText()<CR>

  " Toggle non text character visibility and highlighting
  " This toggles both listchars and the ~ that shows up for
  " empty lines.
  function! s:ToggleNonText()
    if &list
      set nolist

      " This will force any other NonText characters to be invisible
      hi NonText guifg=bg ctermfg=black
    else
      set list
      hi NonText guifg=#A7A7A7 ctermfg=lightgrey
    endif
  endfunction

  " Format the selected section to wrap at 80 chars
  vnoremap <silent> f80 <esc>:set textwidth=80<CR>gvgq :set textwidth=0<CR>

  " Quickly type console.log
  inoremap ccc console.log

  " Always place a found match at the center of the screen.
  nnoremap n nzzzv
  nnoremap N Nzzzv

  " JSON Pretty format the current buffer.
  noremap <leader>json :%!python -m json.tool<CR>:set syntax=json<CR>

  " Copy the full path of the current file to the system clipboard
  noremap <silent> <leader>cfp :let @+ = expand('%:p')<CR>

  " Copy to the system clipboard.
  "
  " I'm using this instad of set clipboard=unnamed, because I don't always
  " want yank to copy to the system keyboard. Only do it when I ask for it.
  noremap <silent> <leader>cp "+y

  " Run the selected section through tidy to correctly format xml
  noremap <leader>xml :'<,'>!tidy -miq -xml -wrap 0<CR>
" End custom mappings
" }}}1

" Autocommands {{{1
  if has('autocmd')
    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    augroup vimrcAutoCommands
      au!

      " When editing a file, always jump to the last known cursor position.
      " Don't do it when the position is invalid or when inside an event handler
      " (happens when dropping a file on gvim).
      " Also don't do it when the mark is in the first line, that is the default
      " position when opening a file.
      autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

      " Resize splits when the window is resized
      autocmd VimResized * exe "normal! \<c-w>="

      " Automatically check if the file has been changed outside vim
      autocmd CursorHold,CursorMoved * checktime

      " Enable spell check for text files
      autocmd BufNewFile,BufRead *.txt,*.wiki,*.mkd,*.markdown setlocal spell spelllang=en

      " For vim files, use markers as the foldmethod and collapse everything
      autocmd Filetype vim setlocal foldmethod=marker | setlocal foldlevel=0

      " For html and eruby files using indent level for folding
      autocmd Filetype html,eruby setlocal foldmethod=indent | setlocal foldlevel=1

      " Turn on listchars when in visual mode
      autocmd CursorMoved * if mode() =~# "[vV\<C-v>]" | set list | else | set nolist | endif

      " Set a few JavaScript related *rc filetypes to JSON
      autocmd BufNewFile,BufRead .babelrc,.eslintrc setlocal spell filetype=json

      " Automatically show the quickfix window for any of the commands that use
      " `grep` (e.g. Glog).
      autocmd QuickFixCmdPost *grep* cwindow

      " Set .js6 files to the JavaScript filetype
      autocmd BufNewFile,BufRead *.js6 set filetype=javascript

      " Refresh syntax highlighting on a few events.
      "
      " This should fix issues here the syntax highlighting gets out of sync
      " every once in a while.
      autocmd BufEnter,BufLeave,InsertLeave * syntax sync fromstart

      " Always make help windows take up the full screen
      autocmd BufWinEnter * if &l:buftype ==# 'help' | only

      " Turn off spellcheck for helpfiles
      autocmd BufWinEnter * if &l:buftype ==# 'help' | setlocal nospell

      autocmd BufEnter * call SetupTerminal()

      " Setup some special settings when using a terminal within (n)vim.
      " This is a little more complicated than expected because we don't want to
      " modify the fzf terminal settings.
      function! SetupTerminal()
        " fzf uses a terminal. Don't mess with any of its settings.
        if &filetype == 'fzf'
          return
        endif

        " Map the esc key in the terminal so that it will escape insert mode.
        tnoremap <buffer> <esc> <C-\><C-n>

        augroup TerminalGroup
          autocmd! * <buffer>

          " Run these settings when the terminal actually opens
          autocmd TermOpen <buffer> set nonumber | :startinsert
        augroup END
      endfunction
    augroup END
  else
    set autoindent " always set autoindenting on
  endif
" End autocommands
" }}}1

" Custom commands {{{1
  " Creates a visual gutter starting at the column passed in.
  " For example to start a gutter at 80 chars:
  "   :CreateGutter 80
  command! -nargs=1 CreateGutter :exec 'setlocal colorcolumn=' . join(range(<args>, 500), ',')

  " Removes the visual gutter.
  command! RemoveGutter :setlocal colorcolumn=

  " Generates a list of emojis in the current buffer
  function! EmojiList()
    for e in emoji#list()
      call append(line('$'), printf('%s (%s)', emoji#for(e), e))
    endfor
  endfunction

  command! EmojiList call EmojiList()

  " Create a custom "handsome" version of the man command
  " (for use when vim is being used as a MANPAGER)
  function! HandsomeMan()
    " Don't let the man plugin define the mappings
    " I want to manually define them so I can customize the mappings
    " (specifically, I want to q to quit everything)
    let g:no_man_maps = 1

    " Turn on folding for the man ft plugin
    let g:ft_man_folding_enable = 1

    set filetype=man
    nnoremap <silent> <esc> :qall!<CR>
    nnoremap <silent> q :qall!<CR>
    nnoremap <silent> <SPACE> <C-D>
    nnoremap <silent> b <C-U>
    nnoremap <silent> t :call man#show_toc()<CR>
    nnoremap <silent> <buffer> <C-]> :Man<CR>
    nnoremap <silent> <buffer> <C-T> :call man#pop_tag()<CR>

    Pencil
    Goyo 80
  endfunction

  command! HandsomeMan call HandsomeMan()
" End custom commands
" }}}1
