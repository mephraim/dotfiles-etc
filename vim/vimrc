" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Set the mapleader before doing anything else, so that any leader mappings will
" have the correct leader key.
let mapleader = ","

" Plugin setup {{{1
  call plug#begin('~/dotfiles-etc/vim/plugged')

  Plug 'bogado/file-line'
  Plug 'elzr/vim-json'
  Plug 'jaxbot/selective-undo.vim'
  Plug 'jparise/vim-graphql'
  Plug 'junegunn/vim-emoji'
  Plug 'markonm/traces.vim'
  Plug 'michaeljsmith/vim-indent-object'
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'rhysd/git-messenger.vim'
  Plug 'skywind3000/asyncrun.vim', { 'on': 'AsyncRun' }
  Plug 'tomtom/tcomment_vim'
  Plug 'tpope/vim-abolish'
  Plug 'tpope/vim-characterize'
  Plug 'tpope/vim-rails'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-surround'
  Plug 'vim-scripts/SyntaxAttr.vim'
  Plug 'vim-scripts/matchit.zip'

  " Airline {{{2
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''

    " Customize the tabline
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#fnamemod = ':t'

    let g:airline#extensions#tabline#left_sep = ''
    let g:airline#extensions#tabline#left_alt_sep = ''

    let g:airline#extensions#tabline#buffer_idx_mode = 0
    let g:airline#extensions#tabline#buffer_nr_show = 0
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#show_splits = 0
    let g:airline#extensions#tabline#show_tab_count = 0
    let g:airline#extensions#tabline#show_tab_nr = 0
    let g:airline#extensions#tabline#tab_min_count = 0
    let g:airline#extensions#tabline#tabs_label = '  '
    let g:airline#extensions#tabline#show_close_button = 0

    " Show the branch name, but not the number of changes
    let g:airline#extensions#branch#enabled = 1
    let g:airline#extensions#hunks#enabled = 0

    " Enable trailing whitespace warnings
    let g:airline#extensions#whitespace#enabled = 1
    let g:airline#extensions#whitespace#symbol = ''
    let g:airline#extensions#whitespace#trailing_format = '⎵  [%s]'
    let g:airline#extensions#whitespace#mixed_indent_format = '▸ [%s]'

    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif

    let g:airline_symbols.branch = "\uE725"
    let g:airline_theme = 'base16_twilight'
  " }}}2

  " Ale {{{2
    function! AfterAleInstall(info)
      if a:info.status == 'installed' || a:info.force
        call InstallLinters()
      endif
    endfunction

    " Installs all of the required linters
    function! InstallLinters()
      " Shellscript linter
      !brew install shellcheck

      " Alex linter for prose
      !npm install alex --global

      " Vimscript lint
      !pip3 install vim-vint

      " Sass lint
      !npm install sass-lint --global
    endfunction

    command! InstallLinters call InstallLinters()

    Plug 'w0rp/ale', { 'do': function('AfterAleInstall') }

    " Open a quickfix window for Ale errors
    let g:ale_open_list = 1

    " In nvim, the ALE signs can have more than one character
    if has('nvim')
      let g:ale_sign_error = "× "
      let g:ale_sign_warning = "× "

    " Only use one character for other vims
    else
      let g:ale_sign_error = "×"
      let g:ale_sign_warning = "×"
    end

    " Enable the Ale airline plugin
    let g:airline#extensions#ale#enabled = 1

    " Set the height of the Ale window to be only 4 lines tall
    let g:ale_list_window_size = 5

    " Only run Ale when the file has been saved
    let g:ale_lint_on_text_changed = 'never'

    " Turn on virtual text when it's available
    if has('nvim')
      let g:ale_virtualtext_cursor = 1
      "
      " Add a custom prefix to the virtual warnings
      let g:ale_virtualtext_prefix = '↢ '
    end
  " }}}2

  " BufExplorer {{{2
    Plug 'vim-scripts/bufexplorer.zip'

    " Show [No Name] buffers, to make them easier to delete.
    let g:bufExplorerShowNoName = 1
  " }}}2

  " Completion/Language Client integration {{{2
    " COC {{{3
      let g:coc_global_extensions = [
        \ 'coc-css',
        \ 'coc-emoji',
        \ 'coc-json',
        \ 'coc-pyls',
        \ 'coc-solargraph',
        \ 'coc-tsserver',
        \ 'coc-ultisnips',
        \ 'coc-yaml'
      \ ]

      function! AfterCocInstall(info)
        if a:info.status == 'installed' || a:info.force
          call coc#util#install()
          call InstallLanguageServers()
        endif
      endfunction

      " Install any additional language servers that need custom setup.
      function! InstallLanguageServers()
        " Bash language server
        !npm i -g bash-language-server

        " Dockerfile language server
        !npm install -g dockerfile-language-server-nodejs

        " HTML language server
        !npm install --global vscode-html-languageserver-bin

        " Solargraph for Ruby completion
        !gem install solargraph
      endfunction

      Plug 'neoclide/coc.nvim', {'tag': '*', 'do': function('AfterCocInstall')}

      " Setup the tab key to move through the suggested items
      inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<TAB>"
      inoremap <expr><s-tab> pumvisible() ? "\<C-p>" : "\<TAB>"

      " Setup the return key to select the current item
      inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"
    " }}}3

    " Autocommands {{{3
      function! SetupCocMappings()
        nmap gd <Plug>(coc-definition)
        nmap <leader>rn <Plug>(coc-rename)
      endfunction

      augroup vimrcCompletionAutoCommands
        au!

        autocmd BufEnter * call SetupCocMappings()

        " Hide the preview window after a completion is done
        autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
      augroup END
    " }}}3
  " }}}2

  " CtrlSF {{{2
    Plug 'dyng/ctrlsf.vim', { 'on': 'CtrlSF' }
    let g:ctrlsf_auto_close = {
      \ "normal" : 0,
      \ "compact": 0
    \}
  " }}}2

  " Devicons {{{2
    Plug 'ryanoasis/vim-devicons'

    let g:DevIconsEnableFolderExtensionPatternMatching = 1
    let g:DevIconsEnableFoldersOpenClose = 1
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  " }}}2

  " fzf {{{2
    Plug 'junegunn/fzf', { 'do': './install --bin' }
    Plug 'junegunn/fzf.vim'

    " Allow disabling the fancy version of FZF if necessary
    let g:disable_fzf_with_dev_icons = 0

    " Map the spacebar in normal mode to a custom FZF command
    nmap <silent> <Space> :call <sid>OpenFzfFiles()<CR>

    " Open the fzf buffer explorer with ctrl + space
    nmap <silent> <C-Space> :Buffers<CR>

    " Store per command history
    let g:fzf_history_dir = '~/dotfiles-etc/vim/tmp/fzf-history'

    " Set the fzf window to the bottom 20% of the screen
    let g:fzf_layout = { 'down': '~20%' }

    " In neovim, open the fzf browser as a floating window
    " (source: https://github.com/junegunn/fzf.vim/issues/664)
    if has('nvim')
      let $FZF_DEFAULT_OPTS='--layout=reverse'
      let g:fzf_layout = { 'window': 'call FloatingFZF()' }

      function! FloatingFZF()
        let buf = nvim_create_buf(v:false, v:true)
        call setbufvar(buf, '&signcolumn', 'no')

        let height = &lines - 20
        let width = float2nr(&columns - (&columns * 2 / 10))
        let col = float2nr((&columns - width) / 2)

        let opts = {
              \ 'relative': 'editor',
              \ 'row': 8,
              \ 'col': col,
              \ 'width': width,
              \ 'height': height
              \ }

        call nvim_open_win(buf, v:true, opts)
      endfunction 
    end

    " Should we use the fancy version of FZF with dev icons and a file
    " preview?
    function! s:ShouldUseFzfWithDevIcons()
      return has('nvim') && executable('rg') && executable('bat') && isdirectory('.git') && !g:disable_fzf_with_dev_icons
    endfunction

    " Set the fancy of version of fzf to enabled
    function! EnableFzfWithDevIcons()
      let g:disable_fzf_with_dev_icons = 0
    endfunction

    " Set the fancy of version of fzf to disabled
    function! DisableFzfWithDevIcons()
      let g:disable_fzf_with_dev_icons = 1
    endfunction

    " Open the fzf list of files, but add some extra fanciness under the
    " right conditions.
    "
    " The "fancy" version requires neovim, ripgrep and bat, so make sure those
    " are installed first.
    "
    " Also, check if it looks like the cwd is a project directory by checking
    " for the presence of a ".git" directory. This extra fanciness is too slow
    " for large directories (e.g. ~ or /).
    function! s:OpenFzfFiles()
      if <sid>ShouldUseFzfWithDevIcons()
        call <sid>OpenFzfWithDevIcons()
      else
        :Files
      end
    endfunction

    " Bring up a version of the FZF file browser that has devicons and a
    " preview window added (requires that the `bat` binary is installed).
    "
    " Inspired by this thread:
    " https://github.com/ryanoasis/vim-devicons/issues/106
    function! s:OpenFzfWithDevIcons()
      let l:fzf_files_options = ' -m --bind ctrl-f:preview-page-down,ctrl-b:preview-page-up --preview "bat --color always --theme zenburn --style numbers {2..}"'

      function! s:fzf_dev_icons_files()
        let l:fzf_command = 'rg --hidden -l ""'
        let l:files = split(system(l:fzf_command), '\n')
        return s:fzf_dev_icons_prepend_icon(l:files)
      endfunction

      function! s:fzf_dev_icons_prepend_icon(candidates)
        let result = []

        for candidate in a:candidates
          let filename = fnamemodify(candidate, ':p:t')
          let icon = WebDevIconsGetFileTypeSymbol(filename, isdirectory(filename))
          call add(result, printf("%s %s", icon, candidate))
        endfor

        return result
      endfunction

      function! s:fzf_dev_icons_edit_file(items)
        let items = a:items
        let i = 1
        let ln = len(items)

        while i < ln
          let item = items[i]
          let parts = split(item, ' ')
          let file_path = get(parts, 1, '')
          let items[i] = file_path
          let i += 1
        endwhile

        call s:Sink(items)
      endfunction

      let opts = fzf#wrap({})
      let opts.source = <sid>fzf_dev_icons_files()
      let s:Sink = opts['sink*']
      let opts['sink*'] = function('s:fzf_dev_icons_edit_file')
      let opts.options .= l:fzf_files_options

      call fzf#run(opts)
    endfunction
  " }}}2

  " Git {{{2
    Plug 'tpope/vim-fugitive'

    " Better git commit log navigation
    Plug 'gregsexton/gitv'

    " Better git commit message display
    Plug 'rhysd/committia.vim'

    let g:committia_hooks = {}
    function! g:committia_hooks.edit_open(info)
      " Additional settings
      setlocal spell

      " Scroll the diff window from insert mode
      " Map <C-n> and <C-p>
      imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
      imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
    endfunction

    " Automatically show the quickfix window for any of the commands that use
    " `grep` (e.g. Glog).
    autocmd QuickFixCmdPost *grep* cwindow
  " }}}2

  " Gitgutter {{{2
    Plug 'airblade/vim-gitgutter'

    " Customize git gutter signs
    let g:gitgutter_sign_added = '⎸'
    let g:gitgutter_sign_modified = '⎸'
    let g:gitgutter_sign_removed = '⎸'
    let g:gitgutter_sign_removed_first_line = '⎸'
    let g:gitgutter_sign_modified_removed = '⎸'

    let g:gitgutter_highlight_lines = 1
  " }}}2

  " Highlightedyank {{{2
    Plug 'machakann/vim-highlightedyank'
    " Set the highlight duration for the highlighted yank plugin
    let g:highlightedyank_highlight_duration = 3000
  " }}}2

  " Livedown {{{2
    Plug 'shime/vim-livedown'

    " Livedown (markdown preview) binding
    nmap <leader>lm :LivedownToggle<CR>

    " Open the Livedown window automatically
    let g:livedown_open = 1
  " }}}2

  " Loremipsum {{{2
    Plug 'vim-scripts/loremipsum', { 'on': 'Loremipsum' }
    " Quickly generate some lorem ipsum text
    noremap <leader>lorem :Loremipsum<CR>
  " }}}2

  " MatchTagAlways {{{2
    Plug 'alvan/vim-closetag'
    let g:closetag_filetypes = 'eruby,html,javascript.jsx,xhtml'

    Plug 'Valloric/MatchTagAlways'

    let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'eruby' : 1,
      \ 'javascript' : 1
    \}
  " }}}2

  " NarrowRegion {{{2
    Plug 'chrisbra/NrrwRgn', { 'on': 'NarrowRegion' }
    let g:nrrw_rgn_hl = 'NarrowRegion'
  " }}}2

  " NERDTree {{{2
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'tiagofumo/vim-nerdtree-syntax-highlight', { 'on': 'NERDTreeToggle' }
    Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }

    noremap <silent> <leader>n :NERDTreeToggle<CR>
    let NERDTreeHijackNetrw = 1

    " Custom git indicators
    let g:NERDTreeIndicatorMapCustom = {
          \ "Modified"  : "🔺",
          \ "Staged"    : "👍",
          \ "Untracked" : "+",
          \ "Renamed"   : "➜",
          \ "Unmerged"  : "═",
          \ "Deleted"   : "❌",
          \ "Dirty"     : "🔺",
          \ "Clean"     : "✔︎",
          \ 'Ignored'   : '☒',
          \ "Unknown"   : "?"
          \ }
  " }}}2

  " Polyglot {{{2
    Plug 'sheerun/vim-polyglot'

    " Configure JavaScript syntax highlighting
    let g:jsx_ext_required = 0
    let g:javascript_plugin_jsdoc = 1

    au BufNewFile,BufRead *.js6 set filetype=javascript
  " }}}2

  " Prose {{{2
    Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
    Plug 'junegunn/limelight.vim'
    Plug 'reedes/vim-colors-pencil'
    Plug 'reedes/vim-pencil'

    let g:pandoc#syntax#conceal#urls = 1
    Plug 'vim-pandoc/vim-pandoc-syntax'

    " Enable markdown.pandoc sytax for regular Markdown files
    augroup pandoc_syntax
      au! BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc
    augroup END

    Plug '~/.vim/personal_plugins/word_processor'
  " }}}2

  " Snippets {{{2
    Plug 'SirVer/ultisnips'

    " Snippets are separated from the snippet engine
    Plug 'honza/vim-snippets'

    " Override the default expansion since we're also using tab for completion
    let g:UltiSnipsExpandTrigger = '<C-Space>'

    " Set a custom snippets directory
    let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
  " }}}2

  " Supercollider {{{2
    Plug 'supercollider/scvim'

    let g:sclangTerm = "open -a iTerm"
    let g:sclangPipeApp = "~/.vim/plugged/scvim/bin/start_pipe"
    let g:sclangDispatcher = "~/.vim/plugged/scvim/bin/sc_dispatcher"
    let g:scFlash = 1
  " }}}2

  " Tags {{{2
    Plug 'ludovicchabant/vim-gutentags'

    " Store the tags files in a central location so we don't have ignore them
    " in specific projects
    let g:gutentags_cache_dir = "~/.vim/tag_files"

    " These directories don't need to be scanned for tags
    let g:gutentags_ctags_exclude = ['node_modules', 'plugged']

    " Make sure gutentags updates the status line as soon as it's done
    augroup MyGutentagsStatusLineRefresher
      autocmd!
      autocmd User GutentagsUpdating call airline#update_statusline()
      autocmd User GutentagsUpdated call airline#update_statusline()
    augroup END

    Plug 'majutsushi/tagbar'
    let g:tagbar_left = 1
  " }}}2

  " vim-test {{{2
    Plug 'janko-m/vim-test'
    let test#strategy = 'vimterminal'
  " }}}2

  " YankRing {{{2
    Plug 'vim-scripts/YankRing.vim'

    " Set up the yankring history location
    let g:yankring_history_dir = "~/dotfiles-etc/vim/tmp/yankring"

    " Override the default yankring cycling keys
    " This prevents a conflict with the ctrlp plugin
    let g:yankring_replace_n_pkey = '<m-p>'
    let g:yankring_replace_n_nkey = '<m-n>'

    " Show the yankring
    noremap <leader>yr :YRShow<cr>
  " }}}2

  call plug#end()
" End Plugin setup
" }}}1

" Syntax and colorscheme {{{1
  " Switch syntax highlighting on when the terminal has colors
  " or when a GUI is running.
  if &t_Co > 2 || has("gui_running")
    syntax on
  endif

  " Tell the terminal to use 256 colors
  let &t_Co=256

  " Setup truecolors
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors

  " Use a nice 256 color colorscheme
  colorscheme twilight256

  " Load in any customizations to the stock colorschemes
  runtime! colors/custom/*.vim
" End syntax and colorscheme
" }}}1

" Tab and indent related settings {{{1
  set expandtab       " Set up spaces as tabs
  set shiftround      " When at 3 spaces, and I hit > ... go to 4, not 5
  set shiftwidth=2    " Each step of autoindent = 2 spaces
  set smartindent     " Indent based on the previous line
  set smarttab        " Tab at start of line = shiftwidth, otherwise softtabstop
  set softtabstop=2   " 1 "soft tab" = 2 spaces
  set tabstop=2       " 1 tab will count for 2 spaces
" End tab and indent related settings
" }}}1

" Assorted configuration options {{{1
"
  " Customize the fill character for folds
  if has("gui_running")
    set fillchars=fold:┈,vert:⎸
  else
    set fillchars=fold:┈
  endif

  set hidden            " Allow buffer switching without saving
  set history=50        " Keep 50 lines of command line history
  set iskeyword+=-      " Add "-" to the iskeyword setting for CSS classes and ids
  set laststatus=2      " Always show the status line
  set noerrorbells      " No error bells
  set nowrap            " Don't wrap
  set number            " Turn on line numbers
  set ruler             " Show the cursor position all the time
  set scrolloff=2       " Show some context when scrolling
  set showcmd           " Display incomplete commands
  set tags=tags;/       " Search recursively for the tags file
  set visualbell        " Get rid of the annoying beep
  set wildmenu          " Show a menu when I hit tab in command mode

  " Search stuff
  set hlsearch        " Use search highlighting
  set ignorecase      " Search ignoring case
  set incsearch       " Do incremental searching

  " Allow backspacing over everything in insert mode
  set backspace=indent,eol,start

  " Allow the cursor to move past the end of the line in visual block mode
  set virtualedit=block

  " Ending with the double slash includes the full path in the filename
  " of the swap files to avoid conflicts
  set directory=~/dotfiles-etc/vim/tmp//

  " In many terminal emulators the mouse works just fine, thus enable it
  if has('mouse')
    set mouse=a
  endif

  " Use nicer symbols for listchars
  set listchars=trail:·,tab:▸\ ,eol:¬,extends:…,precedes:…

  " Show ↪ at the beginning of wrapped lines
  set showbreak=↪\ " <= Extra whitespace intentional

  set undodir=~/dotfiles-etc/vim/undodir
  set undofile
  set undolevels=1000
  set undoreload=1000

  " Use the patience algorithm for diffs
  " (explanation here: https://vimways.org/2018/the-power-of-diff/)
  if has("patch-8.1.0360")
    set diffopt+=algorithm:patience
  end

  " GUI only {{{2
  if has("gui_running")
    " Maximize gvim window.
    set lines=150 columns=230

    set guioptions-=T " Get rid of the toolbar
    set guioptions-=e " Get rid of the GUI tabs
    set guioptions-=r " Get rid of the right scrollbar
    set guioptions-=R " Get rid of the right scrollbar
    set guioptions-=l " Get rid of the left scrollbar
    set guioptions-=L " Get rid of the left scrollbar
    set guioptions-=b " Get rid of the bottom scrollbar

    " Always start Macvim fullscreen
    if has("gui_macvim")
      set fullscreen
    end

    " If there's a gui and it's not Macvim, assume it's something like gvim
    if !has("gui_macvim")
      " Get rid of the menu bar (almost as good as full screen)
      set guioptions-=m
    end

    " No blinking cursor
    set guicursor=a:blinkon0

    " We use the sign column diffs and syntax warnings so turn it on with
    " extra features for nvim
    if has('nvim')
      set signcolumn='yes:[1-4]'
    else
      set signcolumn=yes
    end
  endif
  " End GUI only
  " }}}2
" End assorted configuration
" }}}1

" Custom colorscheme overrides {{{1
  let g:disable_color_overrides = 0

  augroup ColorOverrides
    au!
    au ColorScheme * call OverrideColors()
  augroup END

  function! OverrideColors()
    if g:disable_color_overrides != 1
      for color_file in split(glob('~/dotfiles-etc/vim/colors/custom/*.vim'), '\n')
        exe 'source' color_file
      endfor

      " Refresh devicons after reloading colorschemes
      " Check to make sure that NERDTree exists before doing this, otherwise it
      " may cause an error, because NERDTree is lazy loaded.
      if exists("g:loaded_webdevicons") && exists("g:NERDTree")
        call webdevicons#refresh()
      endif
    endif
  endfunction
" }}}1

" Folding {{{1
  " Custom fold method adapted from http://dhruvasagar.com/2013/03/28/vim-better-foldtext
  set foldtext=GetFoldText()
  function! GetFoldText() "{{{2
    let foldChar = matchstr(&fillchars, 'fold:\zs.')

    let foldIndent = repeat(' ', indent(v:foldstart))
    let foldExcerpt = GetFoldCodeExcerpt()
    let foldTextStart = strpart(foldIndent . foldExcerpt, 0, (winwidth(0) * 2) / 3) . ' '

    let linesCountText = GetLineFoldLineCountText()
    let foldTextEnd = linesCountText . repeat(foldChar, 8)
    let foldTextLength = strlen(substitute(foldTextStart . foldTextEnd, '.', 'x', 'g')) + &foldcolumn
    return foldTextStart . repeat(foldChar, winwidth(0) - foldTextLength) . foldTextEnd
  endfunction

  " Returns the excerpt of the line that will be displayed as part of the
  " the fold.
  function! GetFoldCodeExcerpt()
    let firstLine = getline(v:foldstart)
    let lastLine = getline(v:foldend)

    " Remove some junk we don't want to show from the first and last lines.
    let lineCleanupPattern = '\v^\s*'
    let firstLineSnippet = substitute(firstLine, lineCleanupPattern, '', 'g')
    let lastLineSnippet = substitute(lastLine, lineCleanupPattern, '', 'g')

    " Check for lines where the method name + parameters list is longer than
    " can be displayed. For these, collapse the parameter list.
    let methodAndParamsPattern = '\v(\w+)\(([^\(]*)\)'
    if len(matchstr(firstLineSnippet, methodAndParamsPattern)) > 60
      let firstLineSnippet = substitute(firstLineSnippet, methodAndParamsPattern, '\1(...)', 'g')
    end

    let collapsedChar = '≓'
    return firstLineSnippet . ' ' . collapsedChar . ' ' . lastLineSnippet
  endfunction

  " Returns the line count that will be displayed on the right side of
  " the fold.
  function! GetLineFoldLineCountText()
    let lines_count = v:foldend - v:foldstart + 1
    return ' ' . printf("%10s", lines_count . ' lines') . ' '
  endfunction

  set foldlevelstart=1 " Start folding at level 1, rather than 0
  set foldmethod=syntax " Use the indent level to create folds
  set foldminlines=3 " Don't fold groups that are smaller than this
  " End custom folding
" }}}1

" Custom mappings {{{1
  " Don't use Ex mode, use Q for formatting
  noremap Q gq

  " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
  " so that you can undo CTRL-U after inserting a line break.
  inoremap <C-U> <C-G>u<C-U>

  " If there's a gui and it's not Macvim, assume it's something like gvim
  if has("gui_running") && !has("gui_macvim")
    " Set up copy and paste so they work more like other apps
    inoremap <C-V> <ESC>"+gpi
    cnoremap <C-V> <C-R>+
    vnoremap <C-C> "+y

    " Adjust the columns and lines to make the page actually full screen
    nnoremap <leader>full :set columns+=1 lines+=1<CR>
  end

  " Quick buffer stuff
  noremap <leader>bd :bd<CR>
  noremap <leader>bdd :bd!<CR>
  noremap <leader>q :q<CR>

  " Quickly get rid of highlighting
  noremap <leader>nh :noh<CR>

  "Fast editing of .vimrc
  noremap <leader>vimrc :tabedit $MYVIMRC<CR>

  " Hitting jj will jump out of insert mode
  inoremap jj <esc>

  " Hitting kk will jump out of insert mode
  inoremap kk <esc>

  " Quick vertical split
  noremap <leader>sv :vsplit<CR>

  " Quick horizontal split
  noremap <leader>sh :split<CR>

  " Quick full screen toggle
  noremap <leader>fs :set invfullscreen<CR>

  " Search for selected text, forwards or backwards. (http://vim.wikia.com/wiki/VimTip171)
  vnoremap <silent> * :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy/<C-R><C-R>=substitute(
    \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

  vnoremap <silent> # :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy?<C-R><C-R>=substitute(
    \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

  " Searches only within the range that has been selected
  " (http://vim.wikia.com/wiki/Search_only_over_a_visual_range)
  function! RangeSearch(direction)
    call inputsave()
    let g:srchstr = input(a:direction)
    call inputrestore()
    if strlen(g:srchstr) > 0
      let g:srchstr = g:srchstr.
            \ '\%>'.(line("'<")-1).'l'.
            \ '\%<'.(line("'>")+1).'l'
    else
      let g:srchstr = ''
    endif
  endfunction
  vnoremap <silent> / :<C-U>call RangeSearch('/')<CR>:if strlen(g:srchstr) > 0\|exec '/'.g:srchstr\|endif<CR>
  vnoremap <silent> ? :<C-U>call RangeSearch('?')<CR>:if strlen(g:srchstr) > 0\|exec '?'.g:srchstr\|endif<CR>

  " Quickly turn invisibles on and off
  noremap <silent><leader>li :call <SID>ToggleNonText()<CR>

  " Toggle non text character visibility and highlighting
  " This toggles both listchars and the ~ that shows up for
  " empty lines.
  function! s:ToggleNonText()
    if &list
      set nolist

      " This will force any other NonText characters to be invisible
      hi NonText guifg=bg ctermfg=black
    else
      set list
      hi NonText guifg=#A7A7A7 ctermfg=lightgrey
    endif
  endfunction

  " Format the selected section to wrap at 80 chars
  vnoremap <silent> f80 <esc>:set textwidth=80<CR>gvgq :set textwidth=0<CR>

  " Quickly type console.log
  inoremap ccc console.log

  " Always place a found match at the center of the screen.
  nnoremap n nzzzv
  nnoremap N Nzzzv

  " Don't jump around so much when matching with *
  nnoremap * *<c-o>

  " Run a ruby test
  autocmd Filetype ruby noremap <buffer> <leader>rt :terminal ++rows=10 bundle exec rspec %<CR><C-W><C-W>

  " Run a ruby for the current line
  autocmd Filetype ruby noremap <buffer> <leader>rtl :execute 'terminal ++rows=10 bundle exec rspec %:' . line('.')<CR><C-W><C-W>

  " JSON Pretty format the current buffer.
  noremap <leader>json :%!python -m json.tool<CR>:set syntax=json<CR>

" End custom mappings
" }}}1

" Autocommands {{{1
  if has("autocmd")
    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    augroup vimrcAutoCommands
      au!

      " When editing a file, always jump to the last known cursor position.
      " Don't do it when the position is invalid or when inside an event handler
      " (happens when dropping a file on gvim).
      " Also don't do it when the mark is in the first line, that is the default
      " position when opening a file.
      autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

      " Resize splits when the window is resized
      autocmd VimResized * exe "normal! \<c-w>="

      " Automatically check if the file has been changed outside vim
      autocmd CursorHold,CursorMoved * checktime

      " Enable spell check for text files
      autocmd BufNewFile,BufRead *.txt,*.wiki,*.mkd,*.markdown setlocal spell spelllang=en

      " For vim files, use markers as the foldmethod and collapse everything
      autocmd Filetype vim setlocal foldmethod=marker | setlocal foldlevel=0

      " For html and eruby files using indent level for folding
      autocmd Filetype html,eruby setlocal foldmethod=indent | setlocal foldlevel=1

      " Turn on listchars when in visual mode
      autocmd CursorMoved * if mode() =~# "[vV\<C-v>]" | set list | else | set nolist | endif

      " Set a few JavaScript related *rc filetypes to JSON
      autocmd BufNewFile,BufRead .babelrc,.eslintrc setlocal spell filetype=json
    augroup END
  else
    set autoindent " always set autoindenting on
  endif
" End autocommands
" }}}1

" Custom commands {{{1
  " Creates a visual gutter starting at the column passed in.
  " For example to start a gutter at 80 chars:
  "   :CreateGutter 80
  command! -nargs=1 CreateGutter :exec 'setlocal colorcolumn=' . join(range(<args>, 500), ',')

  " Removes the visual gutter.
  command! RemoveGutter :setlocal colorcolumn=

  " Generates a list of emojis in the current buffer
  function! EmojiList()
    for e in emoji#list()
      call append(line('$'), printf('%s (%s)', emoji#for(e), e))
    endfor
  endfunction

  command! EmojiList call EmojiList()
" End custom commands
" }}}1
