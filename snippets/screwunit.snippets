# Screw unit block
snippet screw
	Screw.Unit(function() {
	${1:body}
	});

# require
snippet req
	require("${1:/specs/spec_helper}");

# describe
snippet des
	describe("${1:description}", function() {
	${2}
	});

# before
snippet bef
	before(function() {
	${1}
	});

# after
snippet aft
	after(function() {
	${1}
	});

# it
snippet it
	it("${1:description}", function() {
	${2}
	});

# expect
snippet ex
	expect(${1:target}).to(${2:matcher}, ${3:value});

# expect not
snippet exn
	expect(${1:target}).to_not(${2:matcher}, ${3:value});

# expect to equal
snippet ex=
	expect(${1:target}).to(equal, ${2:value});

# expect to_not equal
snippet exn=
	expect(${1:target}).to_not(equal, ${2:value});

# expect to match
snippet exm
	expect(${1:target}).to(match, ${2:value});

# expect to not match
snippet exnm
	expect(${1:target}).to_not(match, ${2:value});

# expect to be empty
snippet exbe
	expect(${1:target}).to(be_empty, ${2:value});

# expect to not be empty
snippet exnbe
	expect(${1:target}).to(be_empty, ${2:value});

# matcher
snippet matcher
	Screw.Matchers['${1:matcher}'] = {
		match: function(expected, actual) {
			return ${2:actual.indexOf(expected) != -1};
		},
		failure_message: function(expected, actual, not) {
			return 'expected ' + \$.print(actual) + (not ? ' not' : '') + ${3:' to include ' + \$.print(expected)};
		}
	};
	

